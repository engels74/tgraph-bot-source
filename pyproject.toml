[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tgraph-bot"
version = "1.0.0"
description = "A Discord bot for automatically generating and posting Tautulli graphs"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "engels74", email = "141435164+engels74@users.noreply.github.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
    "Topic :: Multimedia :: Graphics :: Presentation",
]
requires-python = ">=3.13"
dependencies = [
    "discord.py>=2.3.0",
    "pydantic>=2.5.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "httpx>=0.25.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "basedpyright>=1.8.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/engels74/tgraph-bot-source"
Repository = "https://github.com/engels74/tgraph-bot-source"
Issues = "https://github.com/engels74/tgraph-bot-source/issues"

[project.scripts]
tgraph-bot = "main:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bot",
    "--cov=config",
    "--cov=graphs",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.basedpyright]
include = ["bot", "config", "graphs", "utils", "main.py", "i18n.py"]
exclude = ["tests", "locale"]
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportOverlappingOverload = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportFunctionMemberAccess = true
reportArgumentType = true
reportAssignmentType = true
reportAttributeAccessIssue = true
reportCallIssue = true
reportGeneralTypeIssues = true
reportRedeclaration = true
reportReturnType = true

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S101", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["bot", "config", "graphs", "utils"]

[tool.coverage.run]
source = ["bot", "config", "graphs", "utils"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
