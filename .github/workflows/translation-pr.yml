name: Translation PR Handler

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'locale/**'
      - '.weblate'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-translations:
    name: Validate Translation Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Validate PO files
        id: validate
        run: |
          echo "## Translation Validation Results" > validation_report.md
          echo "" >> validation_report.md
          
          # Run validation
          uv run python scripts/compile_translations.py --check > validation_output.txt 2>&1 || true
          
          if [[ $? -eq 0 ]]; then
            echo "✅ All translation files are valid!" >> validation_report.md
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Translation validation failed:" >> validation_report.md
            echo '```' >> validation_report.md
            cat validation_output.txt >> validation_report.md
            echo '```' >> validation_report.md
            echo "validation_passed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check translation completeness
          echo "" >> validation_report.md
          echo "### Translation Status" >> validation_report.md
          echo "" >> validation_report.md
          echo "| Language | Completion | Status |" >> validation_report.md
          echo "|----------|------------|--------|" >> validation_report.md
          
          # Create a script to check translation status
          cat > check_status.py << 'EOF'
import polib
from pathlib import Path
import json

locale_dir = Path('locale')
completed_langs = []
all_langs = []

for po_file in locale_dir.glob('*/LC_MESSAGES/messages.po'):
    lang = po_file.parent.parent.name
    all_langs.append(lang)
    
    try:
        po = polib.pofile(str(po_file))
        total = len([e for e in po if not e.obsolete])
        translated = len([e for e in po if e.translated() and not e.obsolete])
        percentage = (translated / total * 100) if total > 0 else 0
        
        status_icon = "🟢" if percentage == 100 else "🟡" if percentage >= 80 else "🔴"
        print(f"| {lang} | {percentage:.1f}% | {status_icon} |")
        
        if percentage == 100:
            completed_langs.append(lang)
    except Exception as e:
        print(f"| {lang} | Error | ❌ |")

# Output for GitHub Actions
with open('translation_status.json', 'w') as f:
    json.dump({
        'completed_languages': completed_langs,
        'all_languages': all_langs
    }, f)
EOF
          
          uv run python check_status.py >> validation_report.md
          
          # Read status for outputs
          if [[ -f translation_status.json ]]; then
            completed=$(jq -r '.completed_languages | join(",")' translation_status.json)
            echo "completed_languages=$completed" >> $GITHUB_OUTPUT
          fi
      
      - name: Post validation results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation_report.md', 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Translation Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
      
      - name: Set check status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const passed = '${{ steps.validate.outputs.validation_passed }}' === 'true';
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'translation-check',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: passed ? 'success' : 'failure',
              output: {
                title: passed ? 'Translation validation passed' : 'Translation validation failed',
                summary: passed ? 'All translation files are valid' : 'Please fix the validation errors'
              }
            });
    
    outputs:
      validation_passed: ${{ steps.validate.outputs.validation_passed }}
      completed_languages: ${{ steps.validate.outputs.completed_languages }}

  run-tests:
    name: Run Integration Tests
    needs: validate-translations
    if: needs.validate-translations.outputs.validation_passed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Compile translations
        run: |
          uv run python scripts/compile_translations.py
      
      - name: Run i18n tests
        run: |
          uv run pytest tests/unit/test_i18n.py tests/integration/test_locale_structure.py -v
      
      - name: Test bot startup with translations
        run: |
          # Create a test script to verify translations load correctly
          cat > test_translations.py << 'EOF'
import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

try:
    from i18n import setup_i18n, t_
    
    # Test each locale
    locale_dir = Path('locale')
    for lang_dir in locale_dir.iterdir():
        if lang_dir.is_dir() and lang_dir.name != '__pycache__':
            lang = lang_dir.name
            print(f"Testing locale: {lang}")
            
            # Setup i18n for this locale
            setup_i18n(lang)
            
            # Test a basic translation
            test_string = t_("commands.about.description")
            print(f"  Translation test: {test_string}")
            
            if not test_string or test_string == "commands.about.description":
                print(f"  ❌ Translation failed for {lang}")
                sys.exit(1)
    
    print("✅ All translations loaded successfully!")
except Exception as e:
    print(f"❌ Translation test failed: {e}")
    sys.exit(1)
EOF
          
          uv run python test_translations.py

  auto-merge:
    name: Auto-merge if Complete
    needs: [validate-translations, run-tests]
    if: |
      needs.validate-translations.outputs.completed_languages != '' &&
      github.event.pull_request.user.login == 'github-actions[bot]' &&
      contains(github.event.pull_request.labels.*.name, 'automated')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Auto-merge PR
        uses: pascalgn/merge-action@v0.1.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          method: squash
          commit_message: |
            chore(i18n): update translations from Weblate
            
            Completed languages: ${{ needs.validate-translations.outputs.completed_languages }}
            
            Co-authored-by: Weblate <weblate@cccp.ps> 